let fetchedData;
const weatherPage = document.querySelector(".weather-page");

function fetchWeather() {
    if (settings.locations.length === 0) return;

    weatherPage.classList.remove("weather-page--active");

    fetch(`https://api.open-meteo.com/v1/forecast?latitude=${settings.activeLocation.lat}&longitude=${settings.activeLocation.lon}&current=temperature_2m,relative_humidity_2m,apparent_temperature,precipitation,weather_code,wind_speed_10m,wind_gusts_10m,wind_direction_10m&hourly=temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,precipitation_probability,precipitation,weather_code,surface_pressure,cloud_cover,visibility,wind_speed_10m,wind_gusts_10m,uv_index,is_day&daily=weather_code,temperature_2m_max,temperature_2m_min,sunrise,sunset,uv_index_max&timezone=auto&forecast_days=14`)
        .then(respone => respone.json())
        .then(data => {
            console.log(data);
            displayWeatherData(data);
        })
        .catch(error => console.error("Error:", error));
}

function displayHourlyForecast(currentTime, data, length = 24) {
    const hourlyForecastItems = document.querySelector(".hourly-forecast-items");
    const hourlyForecastItemTemplate = document.querySelector("#hourly-forecast-item-template");
    let date = new Date();
    date.setDate(date.getDate() + 1);
    let separatorCount = 0;

    while (hourlyForecastItems.firstChild) {
        hourlyForecastItems.removeChild(hourlyForecastItems.firstChild);
    }

    let isAfterSunset = new Date(data.daily.sunset[0]) < currentTime;
    let isBeforeSunset = new Date(data.daily.sunset[0]) > currentTime;

    const weatherInsights = getHourlyWeatherInsights(data, isAfterSunset, isBeforeSunset, new Date(data.daily.sunset[0]).getHours() + 1);
    if (weatherInsights) {
        document.querySelector(".hourly-forecast .weather-component__title").textContent = weatherInsights;
    } else {
        // document.querySelector(".hourly-forecast .weather-component__title").textContent = "No significant weather conditions expected.";
        document.querySelector(".hourly-forecast .weather-component__title").textContent = "Hourly forecast";
    }

    let theme = settings.theme;
    if (theme === themes.AUTO) theme = window.matchMedia("(prefers-color-scheme: dark)").matches ? themes.DARK : themes.LIGHT;

    let hourlyIconTheme = theme === themes.DARK ? "hours-dark" : "hours-light";

    for (let i = currentTime.getHours(); i < length + currentTime.getHours(); i++) {
        let forecastItem = document.createElement("div");

        forecastItem.classList.add("hourly-forecast-item");
        forecastItem.append(hourlyForecastItemTemplate.content.cloneNode(true));

        let time = data.hourly.time[i].slice(-5);
        if (time === "00:00") {
            let separator = document.createElement("div");
            separator.classList.add("hourly-forecast-separator");
            separator.insertAdjacentText("afterbegin", separatorCount === 0 ? "Tommorow" : date.toLocaleDateString("en-US", {weekday: "long"}));
            date.setDate(date.getDate() + 1);
            separatorCount++;
            hourlyForecastItems.append(separator);
        }
        if (i === currentTime.getHours()) time = "Now";

        forecastItem.querySelector(".hourly-forecast-item__time").insertAdjacentText("afterbegin", time);
        forecastItem.querySelector(".hourly-forecast-item__temperature").insertAdjacentText("afterbegin", Math.round(data.hourly.temperature_2m[i]) + "°");
        const weatherConditionsCodesWithPrecipitation = [51, 53, 55, 56, 57, 61, 63, 65, 66, 67, 71, 73, 75, 77, 80, 81, 82, 85, 86, 95, 96, 99];
        if (data.hourly.precipitation_probability[i] !== 0 && weatherConditionsCodesWithPrecipitation.includes(data.hourly.weather_code[i])) {
            forecastItem.querySelector(".hourly-forecast-item__precipitation").insertAdjacentText("afterbegin", `${Math.round(data.hourly.precipitation_probability[i])}%`);
        }

        if ((new Date(data.daily.sunset[separatorCount]) < new Date(data.hourly.time[i]) && data.hourly.weather_code[i] === 0) || new Date(data.daily.sunrise[separatorCount]) > new Date(data.hourly.time[i]) && data.hourly.weather_code[i] === 0) {
            forecastItem.querySelector(".hourly-forecast-item__icon img").src = `graphics/weathers-icons/${hourlyIconTheme}/clear-moon.svg`;
        } else {
            forecastItem.querySelector(".hourly-forecast-item__icon img").src = `graphics/weathers-icons/${hourlyIconTheme}/${getWeatherConditionIcon(data.hourly.weather_code[i])}.svg`;
        }

        hourlyForecastItems.append(forecastItem);

        const hourlyForecastItemDetailsTemplate = document.querySelector("#hourly-forecast-item-details-template");

        let hourlyForecastItemDetails = document.createElement("div");
        hourlyForecastItemDetails.classList.add("hourly-forecast-item-details");

        hourlyForecastItemDetails.append(hourlyForecastItemDetailsTemplate.content.cloneNode(true));

        hourlyForecastItemDetails.querySelector(".hourly-forecast-item-details__datetime").textContent = new Date(data.hourly.time[i]).toLocaleDateString("en-US", {
            hour: "2-digit",
            minute: "2-digit"
        });
        hourlyForecastItemDetails.querySelector(".hourly-forecast-item-details__condition").textContent = getWeatherConditionDescription(data.hourly.weather_code[i]);

        hourlyForecastItemDetails.querySelector(".precipitation").textContent = `${Math.round(data.hourly.precipitation[i])} mm`;
        hourlyForecastItemDetails.querySelector(".relative-humidity").textContent = `${Math.round(data.hourly.relative_humidity_2m[i])}%`;
        hourlyForecastItemDetails.querySelector(".dewpoint").textContent = `${Math.round(data.hourly.dew_point_2m[i])}°`;
        hourlyForecastItemDetails.querySelector(".apparent-temperature").textContent = `${Math.round(data.hourly.apparent_temperature[i])}°`;
        hourlyForecastItemDetails.querySelector(".precipitation-probability").textContent = `${Math.round(data.hourly.precipitation_probability[i])}%`;
        hourlyForecastItemDetails.querySelector(".pressure").textContent = `${Math.round(data.hourly.surface_pressure[i])} hPa`;
        hourlyForecastItemDetails.querySelector(".cloud-cover").textContent = `${Math.round(data.hourly.cloud_cover[i])}%`;

        hourlyForecastItemDetails.querySelector(".visibility").textContent = `${Math.round(data.hourly.visibility[i])} m`;
        hourlyForecastItemDetails.querySelector(".wind-gusts").textContent = `${Math.round(data.hourly.wind_gusts_10m[i])} km/h`;
        hourlyForecastItemDetails.querySelector(".wind-speed").textContent = `${Math.round(data.hourly.wind_speed_10m[i])} km/h`;

        tippy(forecastItem, {
            content: hourlyForecastItemDetails,
            allowHTML: true,
            theme: 'custom',
            trigger: 'click',
            inertia: {
                duration: 250,
                easing: 'ease-out'
            },
            animation: 'scale',
            placement: 'left',
            interactive: true,
            interactiveDebounce: 75,
            arrow: tippy.roundArrow,
        });
    }
}

function displayCurrentData(data) {
    document.querySelector(".current-weather__location").textContent = `${settings.activeLocation.name}`;
    document.querySelector(".current-weather__temperature").textContent = `${Math.round(data["current"]["temperature_2m"])}°C`;
    document.querySelector(".current-weather__weather-condition").textContent = `${getWeatherConditionDescription(data["current"]["weather_code"])}, feels like ${Math.round(data["current"]["apparent_temperature"])}°`;
    document.querySelector(".current-weather__max-min-temperature").textContent = `H: ${Math.round(data["daily"]["temperature_2m_max"][0])}° L: ${Math.round(data["daily"]["temperature_2m_min"][0])}°`;
}

function displayDailyWeather(data) {
    const dailyForecastItems = document.querySelector(".daily-forecast-items");
    const dailyForecastItemTemplate = document.querySelector("#daily-forecast-item-template");

    while (dailyForecastItems.firstChild) {
        dailyForecastItems.removeChild(dailyForecastItems.firstChild);
    }

    let theme = settings.theme;
    if (theme === themes.AUTO) theme = window.matchMedia("(prefers-color-scheme: dark)").matches ? themes.DARK : themes.LIGHT;

    let iconTheme = theme === themes.DARK ? "dark-theme" : "light-theme";

    for (let i = 0; i < 7; i++) {
        let forecastItem = document.createElement("div");

        forecastItem.classList.add("daily-forecast-item");
        forecastItem.append(dailyForecastItemTemplate.content.cloneNode(true));

        let date = new Date(data["daily"]["time"][i]);
        forecastItem.querySelector(".daily-forecast-item__day").insertAdjacentText("afterbegin", date.toLocaleDateString("en-US", {weekday: "long"}));
        forecastItem.querySelector(".daily-forecast-item__day").insertAdjacentHTML("beforeend", `, ${date.toLocaleDateString("en-US", {
            month: "short",
            day: "numeric"
        })}`);
        forecastItem.querySelector(".daily-forecast-item__weather-condition").insertAdjacentText("afterbegin", getWeatherConditionDescription(data["daily"]["weather_code"][i]));
        forecastItem.querySelector(".daily-forecast-item__icon img").src = `graphics/weathers-icons/${iconTheme}/${getWeatherConditionIcon(data["daily"]["weather_code"][i])}.svg`;
        forecastItem.querySelector(".daily-forecast-item__max-min-temperature").insertAdjacentText("afterbegin", `H: ${Math.round(data["daily"]["temperature_2m_max"][i])}° L: ${Math.round(data["daily"]["temperature_2m_min"][i])}°`);

        dailyForecastItems.append(forecastItem);
    }
}

function displayAirQuality(data) {
    document.querySelector(".aqi__value").textContent = data.current.european_aqi;
    document.querySelector(".aqi__description").textContent = `European Air Quality Index: ${getAQIDescription(data.current.european_aqi)}`;

    document.querySelector("#pm10 .aqi-pollutant__value").textContent = data.hourly.pm10[0];
    document.querySelector("#pm2_5 .aqi-pollutant__value").textContent = data.hourly.pm2_5[0];
    document.querySelector("#carbon-monoxide .aqi-pollutant__value").textContent = data.hourly.carbon_monoxide[0];
    document.querySelector("#nitrogen-dioxide .aqi-pollutant__value").textContent = data.hourly.nitrogen_dioxide[0];
    document.querySelector("#sulphur-dioxide .aqi-pollutant__value").textContent = data.hourly.sulphur_dioxide[0];
    document.querySelector("#ozone .aqi-pollutant__value").textContent = data.hourly.ozone[0];

    document.querySelector(".aqi-indicator__thumb").style.left = `${(data.current.european_aqi / 300) * 100}%`;
}

function displayWindData(data) {
    document.querySelector(".wind-speed__value").textContent = `${Math.round(data.current.wind_speed_10m)}`;
    document.querySelector(".wind-gust__value").textContent = `${Math.round(data.current.wind_gusts_10m)}`;

    document.querySelector(".wind__description").textContent = `${getWindDescription(data.current.wind_speed_10m)} - ${getWindDirection(data.current.wind_direction_10m)}`;

    let theme = settings.theme;
    if (theme === themes.AUTO) theme = window.matchMedia("(prefers-color-scheme: dark)").matches ? themes.DARK : themes.LIGHT;

    if (theme === themes.DARK) {
        document.querySelector(".wind__direction").innerHTML = `
        <svg width="150" height="150" viewBox="0 0 150 150" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="75" cy="75" r="70" stroke="#212121" stroke-width="10" stroke-dasharray="2 2" />
            <path d="M75 0L80.1962 10.5H69.8038L75 0Z" fill="white" />
            <path d="M75 150L69.8038 139.5H80.1962L75 150Z" fill="white" />
            <path d="M150 75L139.5 80.1962V69.8038L150 75Z" fill="white" />
            <path d="M0 75L10.5 69.8038V80.1962L0 75Z" fill="white" />
            <circle cx="75" cy="75" r="65" fill="black" />
            <path
                d="M70.8212 25V15.2H72.1792L78.1712 23.222L77.9472 23.348C77.9099 23.1147 77.8772 22.8627 77.8492 22.592C77.8212 22.312 77.7932 22.018 77.7652 21.71C77.7466 21.3927 77.7279 21.0613 77.7092 20.716C77.6999 20.3613 77.6906 19.9927 77.6812 19.61C77.6719 19.2273 77.6672 18.8307 77.6672 18.42V15.2H79.1792V25H77.7932L71.8992 17.272L72.0532 17.076C72.0999 17.6453 72.1372 18.1307 72.1652 18.532C72.2026 18.924 72.2306 19.26 72.2492 19.54C72.2772 19.8107 72.2959 20.0347 72.3052 20.212C72.3146 20.38 72.3192 20.52 72.3192 20.632C72.3286 20.744 72.3332 20.842 72.3332 20.926V25H70.8212Z"
                fill="white" />
            <path
                d="M33.5291 48.2819L26.5994 41.3522L27.5597 40.392L37.4691 41.8274L37.3998 42.0749C37.2084 41.9363 37.0071 41.7812 36.7959 41.6096C36.5781 41.4314 36.3504 41.2433 36.1128 41.0454C35.8752 40.8342 35.6278 40.6131 35.3704 40.3821C35.113 40.1379 34.8457 39.8838 34.5685 39.6198C34.2913 39.3558 34.0075 39.0787 33.7171 38.7883L31.4403 36.5114L32.5094 35.4422L39.4391 42.3719L38.459 43.3519L28.8268 42.0551L28.7971 41.8076C29.2327 42.1772 29.6023 42.494 29.9058 42.758C30.2094 43.0088 30.4668 43.2265 30.678 43.4113C30.8892 43.5829 31.0608 43.7281 31.1928 43.8469C31.3182 43.9591 31.4205 44.0548 31.4997 44.134C31.5855 44.2066 31.6581 44.2726 31.7175 44.332L34.5982 47.2127L33.5291 48.2819ZM42.8541 38.9569L33.7168 34.2348L34.8553 33.0964L40.5277 36.0959C40.6729 36.1619 40.8346 36.251 41.0128 36.3632C41.1844 36.4688 41.3559 36.581 41.5275 36.6998C41.6991 36.8186 41.8575 36.9308 42.0027 37.0364C42.1545 37.1354 42.2799 37.2146 42.3789 37.274L42.0819 37.5511C41.8311 37.1024 41.6364 36.7559 41.4978 36.5117C41.3658 36.2609 41.2669 36.0695 41.2009 35.9375C41.1283 35.7989 41.0689 35.6801 41.0227 35.5811L39.1418 31.2056L40.102 30.2453L44.438 32.1658C44.6624 32.2582 44.8769 32.3605 45.0815 32.4727C45.286 32.5717 45.4873 32.6806 45.6853 32.7994C45.8767 32.9116 46.0813 33.0304 46.2991 33.1558L46.111 33.4824C45.9658 33.2713 45.8503 33.1096 45.7645 32.9974C45.6787 32.872 45.6094 32.7697 45.5566 32.6905C45.5038 32.6113 45.4543 32.5354 45.4081 32.4628C45.3553 32.3836 45.2926 32.2813 45.2201 32.1559C45.1541 32.0239 45.0617 31.8457 44.9429 31.6213L41.9532 25.9984L43.1016 24.8501L47.8236 33.9873L47.0812 34.7298L40.9138 32.2252L41.0425 32.1757L43.5767 38.2342L42.8541 38.9569Z"
                fill="white" />
            <path
                d="M103.379 35.1573L110.309 28.2276L111.269 29.1879L109.834 39.0973L109.586 39.028C109.725 38.8366 109.88 38.6353 110.051 38.4241C110.23 38.2063 110.418 37.9786 110.616 37.741C110.827 37.5035 111.048 37.256 111.279 36.9986C111.523 36.7412 111.777 36.4739 112.041 36.1967C112.305 35.9195 112.582 35.6358 112.873 35.3454L115.15 33.0685L116.219 34.1376L109.289 41.0673L108.309 40.0872L109.606 30.455L109.853 30.4253C109.484 30.8609 109.167 31.2305 108.903 31.5341C108.652 31.8376 108.434 32.095 108.25 32.3062C108.078 32.5174 107.933 32.689 107.814 32.821C107.702 32.9464 107.606 33.0487 107.527 33.1279C107.454 33.2137 107.388 33.2863 107.329 33.3457L104.448 36.2264L103.379 35.1573ZM111.229 43.0073L118.159 36.0776L122.524 40.4433L121.495 41.4728L118.198 38.1763L113.328 43.0469L116.624 46.3434L115.595 47.3729L111.229 43.0073ZM114.753 40.4532L115.783 39.4237L119.119 42.7598L118.089 43.7893L114.753 40.4532Z"
                fill="white" />
            <path
                d="M115.296 104.255C115.672 103.878 116.072 103.578 116.494 103.354C116.91 103.136 117.349 102.994 117.811 102.928C118.273 102.875 118.754 102.895 119.256 102.988L119.365 104.562C118.579 104.423 117.949 104.413 117.474 104.532C116.999 104.651 116.557 104.915 116.147 105.324C115.897 105.575 115.709 105.842 115.583 106.126C115.458 106.409 115.405 106.68 115.425 106.937C115.445 107.195 115.544 107.413 115.722 107.591C115.841 107.71 115.973 107.802 116.118 107.868C116.263 107.934 116.421 107.967 116.593 107.967C116.758 107.974 116.943 107.947 117.147 107.888C117.345 107.835 117.557 107.749 117.781 107.63C118.012 107.518 118.259 107.37 118.523 107.185C118.952 106.901 119.358 106.687 119.741 106.541C120.124 106.396 120.493 106.324 120.85 106.324C121.206 106.324 121.539 106.393 121.85 106.532C122.166 106.677 122.467 106.891 122.75 107.175C123.028 107.452 123.226 107.769 123.344 108.125C123.457 108.488 123.493 108.861 123.453 109.244C123.414 109.64 123.295 110.029 123.097 110.412C122.906 110.802 122.642 111.165 122.305 111.501C121.949 111.857 121.576 112.138 121.186 112.343C120.797 112.547 120.394 112.673 119.979 112.719C119.569 112.772 119.157 112.742 118.741 112.63L118.751 111.135C119.101 111.221 119.431 111.254 119.741 111.234C120.058 111.221 120.351 111.151 120.622 111.026C120.899 110.907 121.15 110.736 121.374 110.511C121.632 110.254 121.817 109.99 121.929 109.719C122.041 109.449 122.081 109.185 122.048 108.927C122.015 108.683 121.902 108.465 121.711 108.274C121.572 108.135 121.417 108.033 121.246 107.967C121.081 107.908 120.899 107.884 120.701 107.898C120.503 107.924 120.276 107.993 120.018 108.106C119.767 108.224 119.487 108.386 119.177 108.591C118.735 108.874 118.309 109.096 117.9 109.254C117.497 109.419 117.114 109.518 116.751 109.551C116.388 109.584 116.055 109.548 115.751 109.442C115.441 109.343 115.167 109.175 114.93 108.937C114.488 108.495 114.207 108.01 114.088 107.482C113.97 106.954 114.009 106.413 114.207 105.858C114.412 105.311 114.775 104.776 115.296 104.255ZM111.356 108.393L118.286 115.323L113.92 119.688L112.89 118.659L116.187 115.362L111.316 110.492L108.02 113.788L106.99 112.759L111.356 108.393ZM113.91 111.917L114.94 112.947L111.603 116.283L110.574 115.253L113.91 111.917Z"
                fill="white" />
            <path
                d="M44.1623 113.186C44.5385 113.562 44.8387 113.962 45.0631 114.384C45.2809 114.8 45.4228 115.239 45.4888 115.701C45.5416 116.163 45.5218 116.644 45.4294 117.146L43.8554 117.255C43.994 116.469 44.0039 115.839 43.8851 115.364C43.7663 114.889 43.5023 114.447 43.0931 114.037C42.8423 113.787 42.5751 113.599 42.2913 113.473C42.0075 113.348 41.7369 113.295 41.4795 113.315C41.2221 113.335 41.0043 113.434 40.8261 113.612C40.7073 113.731 40.615 113.863 40.549 114.008C40.483 114.153 40.45 114.311 40.45 114.483C40.4434 114.648 40.4698 114.833 40.5292 115.037C40.582 115.235 40.6678 115.446 40.7865 115.671C40.8987 115.902 41.0472 116.149 41.232 116.413C41.5158 116.842 41.7303 117.248 41.8755 117.631C42.0207 118.014 42.0933 118.383 42.0933 118.74C42.0933 119.096 42.024 119.429 41.8854 119.74C41.7402 120.056 41.5257 120.357 41.2419 120.64C40.9647 120.918 40.648 121.116 40.2916 121.234C39.9286 121.347 39.5557 121.383 39.1729 121.343C38.7769 121.304 38.3876 121.185 38.0048 120.987C37.6154 120.796 37.2524 120.532 36.9158 120.195C36.5595 119.839 36.279 119.466 36.0744 119.076C35.8698 118.687 35.7444 118.284 35.6982 117.869C35.6454 117.459 35.6751 117.047 35.7873 116.631L37.2821 116.641C37.1963 116.991 37.1633 117.321 37.1831 117.631C37.1963 117.948 37.2656 118.241 37.391 118.512C37.5098 118.789 37.6814 119.04 37.9058 119.264C38.1632 119.522 38.4272 119.707 38.6978 119.819C38.9683 119.931 39.2323 119.971 39.4897 119.938C39.7339 119.905 39.9517 119.792 40.1431 119.601C40.2817 119.462 40.384 119.307 40.45 119.136C40.5094 118.971 40.5325 118.789 40.5193 118.591C40.4929 118.393 40.4236 118.166 40.3114 117.908C40.1926 117.657 40.0309 117.377 39.8263 117.067C39.5425 116.625 39.3214 116.199 39.163 115.79C38.998 115.387 38.899 115.004 38.866 114.641C38.833 114.278 38.8693 113.945 38.9749 113.641C39.0739 113.331 39.2422 113.057 39.4798 112.82C39.922 112.378 40.4071 112.097 40.935 111.978C41.463 111.86 42.0042 111.899 42.5586 112.097C43.1063 112.302 43.6409 112.665 44.1623 113.186ZM38.549 107.771L33.827 116.908L32.6885 115.77L35.6881 110.097C35.7541 109.952 35.8432 109.79 35.9554 109.612C36.061 109.441 36.1731 109.269 36.2919 109.097C36.4107 108.926 36.5229 108.767 36.6285 108.622C36.7275 108.47 36.8067 108.345 36.8661 108.246L37.1433 108.543C36.6945 108.794 36.348 108.988 36.1039 109.127C35.8531 109.259 35.6617 109.358 35.5297 109.424C35.3911 109.497 35.2723 109.556 35.1733 109.602L30.7977 111.483L29.8375 110.523L31.758 106.187C31.8504 105.963 31.9527 105.748 32.0649 105.543C32.1639 105.339 32.2727 105.138 32.3915 104.94C32.5037 104.748 32.6225 104.544 32.7479 104.326L33.0746 104.514C32.8634 104.659 32.7017 104.775 32.5895 104.86C32.4641 104.946 32.3618 105.015 32.2826 105.068C32.2035 105.121 32.1276 105.171 32.055 105.217C31.9758 105.27 31.8735 105.332 31.7481 105.405C31.6161 105.471 31.4379 105.563 31.2135 105.682L25.5906 108.672L24.4422 107.523L33.5795 102.801L34.3219 103.544L31.8174 109.711L31.7679 109.582L37.8264 107.048L38.549 107.771Z"
                fill="white" />
            <path
                d="M75.0278 135.14C74.4958 135.14 74.0012 135.07 73.5438 134.93C73.0958 134.79 72.6852 134.58 72.3118 134.3C71.9478 134.011 71.6212 133.656 71.3318 133.236L72.3678 132.046C72.8252 132.699 73.2638 133.152 73.6838 133.404C74.1038 133.656 74.6032 133.782 75.1818 133.782C75.5365 133.782 75.8585 133.726 76.1478 133.614C76.4372 133.502 76.6658 133.348 76.8338 133.152C77.0018 132.956 77.0858 132.732 77.0858 132.48C77.0858 132.312 77.0578 132.153 77.0018 132.004C76.9458 131.855 76.8572 131.719 76.7358 131.598C76.6238 131.477 76.4745 131.365 76.2878 131.262C76.1105 131.159 75.9005 131.071 75.6578 130.996C75.4152 130.912 75.1352 130.842 74.8178 130.786C74.3138 130.683 73.8752 130.548 73.5018 130.38C73.1285 130.212 72.8158 130.002 72.5638 129.75C72.3118 129.498 72.1252 129.213 72.0038 128.896C71.8825 128.569 71.8218 128.205 71.8218 127.804C71.8218 127.412 71.9058 127.048 72.0738 126.712C72.2512 126.376 72.4892 126.087 72.7878 125.844C73.0958 125.592 73.4552 125.401 73.8658 125.27C74.2765 125.13 74.7198 125.06 75.1958 125.06C75.6998 125.06 76.1618 125.125 76.5818 125.256C77.0018 125.387 77.3752 125.583 77.7018 125.844C78.0285 126.096 78.2992 126.409 78.5138 126.782L77.4498 127.832C77.2632 127.524 77.0532 127.267 76.8198 127.062C76.5865 126.847 76.3298 126.689 76.0498 126.586C75.7698 126.474 75.4712 126.418 75.1538 126.418C74.7898 126.418 74.4725 126.474 74.2018 126.586C73.9312 126.698 73.7165 126.857 73.5578 127.062C73.4085 127.258 73.3338 127.491 73.3338 127.762C73.3338 127.958 73.3712 128.14 73.4458 128.308C73.5205 128.467 73.6325 128.611 73.7818 128.742C73.9405 128.863 74.1505 128.975 74.4118 129.078C74.6732 129.171 74.9858 129.255 75.3498 129.33C75.8632 129.442 76.3205 129.587 76.7218 129.764C77.1232 129.932 77.4638 130.133 77.7438 130.366C78.0238 130.599 78.2338 130.861 78.3738 131.15C78.5232 131.439 78.5978 131.752 78.5978 132.088C78.5978 132.713 78.4532 133.255 78.1638 133.712C77.8745 134.169 77.4638 134.524 76.9318 134.776C76.3998 135.019 75.7652 135.14 75.0278 135.14Z"
                fill="white" />
            <path
                d="M127.072 80V70.2H133.246V71.656H128.584V78.544H133.246V80H127.072ZM127.758 75.702V74.246H132.476V75.702H127.758Z"
                fill="white" />
            <path
                d="M18.4853 80L15.3633 70.2H16.9733L18.8633 76.332C18.9193 76.4813 18.9707 76.6587 19.0173 76.864C19.064 77.06 19.106 77.2607 19.1433 77.466C19.1807 77.6713 19.2133 77.8627 19.2413 78.04C19.2787 78.2173 19.3113 78.362 19.3393 78.474L18.9333 78.46C19.0733 77.9653 19.1807 77.5827 19.2553 77.312C19.3393 77.0413 19.4047 76.836 19.4513 76.696C19.498 76.5467 19.54 76.4207 19.5773 76.318L21.3413 71.894H22.6993L24.4073 76.318C24.5007 76.542 24.58 76.766 24.6453 76.99C24.72 77.2047 24.7853 77.424 24.8413 77.648C24.8973 77.8627 24.958 78.0913 25.0233 78.334L24.6593 78.432C24.706 78.18 24.7387 77.984 24.7573 77.844C24.7853 77.6947 24.8087 77.5733 24.8273 77.48C24.846 77.3867 24.8647 77.298 24.8833 77.214C24.902 77.1207 24.93 77.004 24.9673 76.864C25.014 76.724 25.0747 76.5327 25.1493 76.29L27.0113 70.2H28.6353L25.5133 80H24.4633L21.8733 73.868L21.9993 73.924L19.5073 80H18.4853Z"
                fill="white" />
            <g clip-path="url(#clip0_13_57)" class="arrow">
                <path
                    d="M74.5636 85.2085L61.158 90.8801C60.7161 91.0765 60.2925 91.1195 59.8874 91.009C59.4823 90.8985 59.1447 90.7082 58.8746 90.4382C58.6046 90.1681 58.4204 89.8244 58.3222 89.407C58.224 88.9896 58.2731 88.5599 58.4695 88.118L72.6853 57.1084C72.8572 56.691 73.115 56.3841 73.4587 56.1877C73.8024 55.9913 74.1707 55.8931 74.5636 55.8931C74.9564 55.8931 75.3247 55.9913 75.6684 56.1877C76.0122 56.3841 76.27 56.691 76.4418 57.1084L90.6576 88.118C90.854 88.5599 90.9031 88.9896 90.8049 89.407C90.7067 89.8244 90.5226 90.1681 90.2525 90.4382C89.9824 90.7082 89.6448 90.8985 89.2397 91.009C88.8346 91.1195 88.4111 91.0765 87.9691 90.8801L74.5636 85.2085ZM84.6546 84.9876L74.5636 62.9641L64.4726 84.9876L74.5636 80.6418L84.6546 84.9876Z"
                    fill="white" />
            </g>
            <defs>
                <clipPath id="clip0_13_57">
                    <rect width="50" height="50" fill="white" transform="translate(50 55)" />
                </clipPath>
            </defs>
        </svg>`;
    } else {
        document.querySelector(".wind__direction").innerHTML = `
        <svg width="150" height="150" viewBox="0 0 150 150" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="75" cy="75" r="70" stroke="#F5F5F5" stroke-width="10" stroke-dasharray="2 2"/>
            <path d="M75 0L80.1962 10.5H69.8038L75 0Z" fill="#223552"/>
            <path d="M75 150L69.8038 139.5H80.1962L75 150Z" fill="#223552"/>
            <path d="M150 75L139.5 80.1962V69.8038L150 75Z" fill="#223552"/>
            <path d="M0 75L10.5 69.8038V80.1962L0 75Z" fill="#223552"/>
            <circle cx="75" cy="75" r="65" fill="white"/>
            <path
                    d="M70.8212 25V15.2H72.1792L78.1712 23.222L77.9472 23.348C77.9099 23.1147 77.8772 22.8627 77.8492 22.592C77.8212 22.312 77.7932 22.018 77.7652 21.71C77.7466 21.3927 77.7279 21.0613 77.7092 20.716C77.6999 20.3613 77.6906 19.9927 77.6812 19.61C77.6719 19.2273 77.6672 18.8307 77.6672 18.42V15.2H79.1792V25H77.7932L71.8992 17.272L72.0532 17.076C72.0999 17.6453 72.1372 18.1307 72.1652 18.532C72.2026 18.924 72.2306 19.26 72.2492 19.54C72.2772 19.8107 72.2959 20.0347 72.3052 20.212C72.3146 20.38 72.3192 20.52 72.3192 20.632C72.3286 20.744 72.3332 20.842 72.3332 20.926V25H70.8212Z"
                    fill="#223552"/>
            <path
                    d="M33.5291 48.2819L26.5994 41.3523L27.5597 40.392L37.4691 41.8274L37.3998 42.0749C37.2084 41.9363 37.0071 41.7812 36.7959 41.6097C36.5781 41.4315 36.3504 41.2434 36.1128 41.0454C35.8752 40.8342 35.6277 40.6131 35.3704 40.3821C35.113 40.1379 34.8457 39.8838 34.5685 39.6199C34.2913 39.3559 34.0075 39.0787 33.7171 38.7883L31.4403 36.5114L32.5094 35.4423L39.4391 42.3719L38.459 43.352L28.8268 42.0551L28.7971 41.8076C29.2327 42.1772 29.6023 42.494 29.9058 42.758C30.2094 43.0088 30.4668 43.2266 30.678 43.4114C30.8892 43.583 31.0608 43.7281 31.1928 43.8469C31.3182 43.9591 31.4205 44.0548 31.4997 44.134C31.5855 44.2066 31.6581 44.2726 31.7174 44.332L34.5982 47.2128L33.5291 48.2819ZM42.8541 38.9569L33.7168 34.2348L34.8553 33.0964L40.5277 36.0959C40.6729 36.1619 40.8346 36.251 41.0128 36.3632C41.1844 36.4688 41.3559 36.581 41.5275 36.6998C41.6991 36.8186 41.8575 36.9308 42.0027 37.0364C42.1545 37.1354 42.2799 37.2146 42.3789 37.274L42.0819 37.5512C41.8311 37.1024 41.6364 36.7559 41.4978 36.5117C41.3658 36.2609 41.2669 36.0695 41.2009 35.9376C41.1283 35.799 41.0689 35.6802 41.0227 35.5812L39.1418 31.2056L40.102 30.2453L44.438 32.1658C44.6624 32.2582 44.8769 32.3605 45.0815 32.4727C45.286 32.5717 45.4873 32.6806 45.6853 32.7994C45.8767 32.9116 46.0813 33.0304 46.2991 33.1558L46.111 33.4825C45.9658 33.2713 45.8503 33.1096 45.7645 32.9974C45.6787 32.872 45.6094 32.7697 45.5566 32.6905C45.5038 32.6113 45.4543 32.5354 45.4081 32.4628C45.3553 32.3836 45.2926 32.2813 45.2201 32.1559C45.1541 32.024 45.0617 31.8458 44.9429 31.6214L41.9532 25.9985L43.1016 24.8501L47.8236 33.9874L47.0812 34.7298L40.9138 32.2252L41.0425 32.1757L43.5767 38.2342L42.8541 38.9569Z"
                    fill="#223552"/>
            <path
                    d="M103.379 35.1573L110.309 28.2276L111.269 29.1879L109.834 39.0973L109.586 39.028C109.725 38.8366 109.88 38.6353 110.051 38.4241C110.23 38.2063 110.418 37.9786 110.616 37.741C110.827 37.5035 111.048 37.256 111.279 36.9986C111.523 36.7412 111.777 36.4739 112.041 36.1967C112.305 35.9195 112.582 35.6358 112.873 35.3454L115.15 33.0685L116.219 34.1376L109.289 41.0673L108.309 40.0872L109.606 30.455L109.853 30.4253C109.484 30.8609 109.167 31.2305 108.903 31.5341C108.652 31.8376 108.434 32.095 108.25 32.3062C108.078 32.5174 107.933 32.689 107.814 32.821C107.702 32.9464 107.606 33.0487 107.527 33.1279C107.454 33.2137 107.388 33.2863 107.329 33.3457L104.448 36.2264L103.379 35.1573ZM111.229 43.0073L118.159 36.0776L122.524 40.4433L121.495 41.4728L118.198 38.1763L113.328 43.0469L116.624 46.3434L115.595 47.3729L111.229 43.0073ZM114.753 40.4532L115.783 39.4237L119.119 42.7598L118.089 43.7893L114.753 40.4532Z"
                    fill="#223552"/>
            <path
                    d="M115.296 104.255C115.672 103.878 116.072 103.578 116.494 103.354C116.91 103.136 117.349 102.994 117.811 102.928C118.273 102.875 118.754 102.895 119.256 102.988L119.365 104.562C118.579 104.423 117.949 104.413 117.474 104.532C116.999 104.651 116.557 104.915 116.147 105.324C115.897 105.575 115.709 105.842 115.583 106.126C115.458 106.409 115.405 106.68 115.425 106.937C115.445 107.195 115.544 107.413 115.722 107.591C115.841 107.71 115.973 107.802 116.118 107.868C116.263 107.934 116.421 107.967 116.593 107.967C116.758 107.974 116.943 107.947 117.147 107.888C117.345 107.835 117.557 107.749 117.781 107.63C118.012 107.518 118.259 107.37 118.523 107.185C118.952 106.901 119.358 106.687 119.741 106.541C120.124 106.396 120.493 106.324 120.85 106.324C121.206 106.324 121.539 106.393 121.85 106.532C122.166 106.677 122.467 106.891 122.75 107.175C123.028 107.452 123.226 107.769 123.344 108.125C123.457 108.488 123.493 108.861 123.453 109.244C123.414 109.64 123.295 110.029 123.097 110.412C122.906 110.802 122.642 111.165 122.305 111.501C121.949 111.857 121.576 112.138 121.186 112.343C120.797 112.547 120.394 112.673 119.979 112.719C119.569 112.772 119.157 112.742 118.741 112.63L118.751 111.135C119.101 111.221 119.431 111.254 119.741 111.234C120.058 111.221 120.351 111.151 120.622 111.026C120.899 110.907 121.15 110.736 121.374 110.511C121.632 110.254 121.817 109.99 121.929 109.719C122.041 109.449 122.081 109.185 122.048 108.927C122.015 108.683 121.902 108.465 121.711 108.274C121.572 108.135 121.417 108.033 121.246 107.967C121.081 107.908 120.899 107.884 120.701 107.898C120.503 107.924 120.276 107.993 120.018 108.106C119.767 108.224 119.487 108.386 119.177 108.591C118.735 108.874 118.309 109.096 117.9 109.254C117.497 109.419 117.114 109.518 116.751 109.551C116.388 109.584 116.055 109.548 115.751 109.442C115.441 109.343 115.167 109.175 114.93 108.937C114.488 108.495 114.207 108.01 114.088 107.482C113.97 106.954 114.009 106.413 114.207 105.858C114.412 105.311 114.775 104.776 115.296 104.255ZM111.356 108.393L118.286 115.323L113.92 119.688L112.89 118.659L116.187 115.362L111.316 110.492L108.02 113.788L106.99 112.759L111.356 108.393ZM113.91 111.917L114.94 112.947L111.603 116.283L110.574 115.253L113.91 111.917Z"
                    fill="#223552"/>
            <path
                    d="M44.1623 113.186C44.5384 113.562 44.8387 113.962 45.0631 114.384C45.2809 114.8 45.4228 115.239 45.4888 115.701C45.5416 116.163 45.5218 116.644 45.4294 117.146L43.8554 117.255C43.994 116.469 44.0039 115.839 43.8851 115.364C43.7663 114.889 43.5023 114.447 43.0931 114.037C42.8423 113.787 42.5751 113.599 42.2913 113.473C42.0075 113.348 41.7369 113.295 41.4795 113.315C41.2221 113.335 41.0043 113.434 40.8261 113.612C40.7073 113.731 40.6149 113.863 40.549 114.008C40.483 114.153 40.45 114.311 40.45 114.483C40.4434 114.648 40.4698 114.833 40.5292 115.037C40.582 115.235 40.6677 115.446 40.7865 115.671C40.8987 115.902 41.0472 116.149 41.232 116.413C41.5158 116.842 41.7303 117.248 41.8755 117.631C42.0207 118.014 42.0933 118.383 42.0933 118.74C42.0933 119.096 42.024 119.429 41.8854 119.74C41.7402 120.056 41.5257 120.357 41.2419 120.64C40.9647 120.918 40.6479 121.116 40.2916 121.234C39.9286 121.347 39.5557 121.383 39.1729 121.343C38.7769 121.304 38.3876 121.185 38.0048 120.987C37.6154 120.796 37.2524 120.532 36.9158 120.195C36.5595 119.839 36.279 119.466 36.0744 119.076C35.8698 118.687 35.7444 118.284 35.6982 117.869C35.6454 117.459 35.6751 117.047 35.7873 116.631L37.2821 116.641C37.1963 116.991 37.1633 117.321 37.1831 117.631C37.1963 117.948 37.2656 118.241 37.391 118.512C37.5098 118.789 37.6814 119.04 37.9058 119.264C38.1632 119.522 38.4272 119.707 38.6977 119.819C38.9683 119.931 39.2323 119.971 39.4897 119.938C39.7339 119.905 39.9517 119.792 40.1431 119.601C40.2817 119.462 40.384 119.307 40.45 119.136C40.5094 118.971 40.5325 118.789 40.5193 118.591C40.4929 118.393 40.4236 118.166 40.3114 117.908C40.1926 117.657 40.0309 117.377 39.8263 117.067C39.5425 116.625 39.3214 116.199 39.163 115.79C38.998 115.387 38.899 115.004 38.866 114.641C38.833 114.278 38.8693 113.945 38.9749 113.641C39.0739 113.331 39.2422 113.057 39.4798 112.82C39.922 112.378 40.4071 112.097 40.935 111.978C41.463 111.86 42.0042 111.899 42.5586 112.097C43.1063 112.302 43.6409 112.665 44.1623 113.186ZM38.549 107.771L33.827 116.908L32.6885 115.77L35.6881 110.097C35.7541 109.952 35.8432 109.79 35.9554 109.612C36.061 109.441 36.1731 109.269 36.2919 109.097C36.4107 108.926 36.5229 108.767 36.6285 108.622C36.7275 108.47 36.8067 108.345 36.8661 108.246L37.1433 108.543C36.6945 108.794 36.348 108.988 36.1038 109.127C35.8531 109.259 35.6617 109.358 35.5297 109.424C35.3911 109.497 35.2723 109.556 35.1733 109.602L30.7977 111.483L29.8375 110.523L31.758 106.187C31.8504 105.963 31.9527 105.748 32.0649 105.543C32.1638 105.339 32.2727 105.138 32.3915 104.94C32.5037 104.748 32.6225 104.544 32.7479 104.326L33.0746 104.514C32.8634 104.659 32.7017 104.775 32.5895 104.86C32.4641 104.946 32.3618 105.015 32.2826 105.068C32.2034 105.121 32.1276 105.171 32.055 105.217C31.9758 105.27 31.8735 105.332 31.7481 105.405C31.6161 105.471 31.4379 105.563 31.2135 105.682L25.5906 108.672L24.4422 107.523L33.5795 102.801L34.3219 103.544L31.8174 109.711L31.7679 109.582L37.8264 107.048L38.549 107.771Z"
                    fill="#223552"/>
            <path
                    d="M75.0278 135.14C74.4958 135.14 74.0012 135.07 73.5438 134.93C73.0958 134.79 72.6852 134.58 72.3118 134.3C71.9478 134.011 71.6212 133.656 71.3318 133.236L72.3678 132.046C72.8252 132.699 73.2638 133.152 73.6838 133.404C74.1038 133.656 74.6032 133.782 75.1818 133.782C75.5365 133.782 75.8585 133.726 76.1478 133.614C76.4372 133.502 76.6658 133.348 76.8338 133.152C77.0018 132.956 77.0858 132.732 77.0858 132.48C77.0858 132.312 77.0578 132.153 77.0018 132.004C76.9458 131.855 76.8572 131.719 76.7358 131.598C76.6238 131.477 76.4745 131.365 76.2878 131.262C76.1105 131.159 75.9005 131.071 75.6578 130.996C75.4152 130.912 75.1352 130.842 74.8178 130.786C74.3138 130.683 73.8752 130.548 73.5018 130.38C73.1285 130.212 72.8158 130.002 72.5638 129.75C72.3118 129.498 72.1252 129.213 72.0038 128.896C71.8825 128.569 71.8218 128.205 71.8218 127.804C71.8218 127.412 71.9058 127.048 72.0738 126.712C72.2512 126.376 72.4892 126.087 72.7878 125.844C73.0958 125.592 73.4552 125.401 73.8658 125.27C74.2765 125.13 74.7198 125.06 75.1958 125.06C75.6998 125.06 76.1618 125.125 76.5818 125.256C77.0018 125.387 77.3752 125.583 77.7018 125.844C78.0285 126.096 78.2992 126.409 78.5138 126.782L77.4498 127.832C77.2632 127.524 77.0532 127.267 76.8198 127.062C76.5865 126.847 76.3298 126.689 76.0498 126.586C75.7698 126.474 75.4712 126.418 75.1538 126.418C74.7898 126.418 74.4725 126.474 74.2018 126.586C73.9312 126.698 73.7165 126.857 73.5578 127.062C73.4085 127.258 73.3338 127.491 73.3338 127.762C73.3338 127.958 73.3712 128.14 73.4458 128.308C73.5205 128.467 73.6325 128.611 73.7818 128.742C73.9405 128.863 74.1505 128.975 74.4118 129.078C74.6732 129.171 74.9858 129.255 75.3498 129.33C75.8632 129.442 76.3205 129.587 76.7218 129.764C77.1232 129.932 77.4638 130.133 77.7438 130.366C78.0238 130.599 78.2338 130.861 78.3738 131.15C78.5232 131.439 78.5978 131.752 78.5978 132.088C78.5978 132.713 78.4532 133.255 78.1638 133.712C77.8745 134.169 77.4638 134.524 76.9318 134.776C76.3998 135.019 75.7652 135.14 75.0278 135.14Z"
                    fill="#223552"/>
            <path
                    d="M127.072 80V70.2H133.246V71.656H128.584V78.544H133.246V80H127.072ZM127.758 75.702V74.246H132.476V75.702H127.758Z"
                    fill="#223552"/>
            <path
                    d="M18.4853 80L15.3633 70.2H16.9733L18.8633 76.332C18.9193 76.4813 18.9707 76.6587 19.0173 76.864C19.064 77.06 19.106 77.2607 19.1433 77.466C19.1807 77.6713 19.2133 77.8627 19.2413 78.04C19.2787 78.2173 19.3113 78.362 19.3393 78.474L18.9333 78.46C19.0733 77.9653 19.1807 77.5827 19.2553 77.312C19.3393 77.0413 19.4047 76.836 19.4513 76.696C19.498 76.5467 19.54 76.4207 19.5773 76.318L21.3413 71.894H22.6993L24.4073 76.318C24.5007 76.542 24.58 76.766 24.6453 76.99C24.72 77.2047 24.7853 77.424 24.8413 77.648C24.8973 77.8627 24.958 78.0913 25.0233 78.334L24.6593 78.432C24.706 78.18 24.7387 77.984 24.7573 77.844C24.7853 77.6947 24.8087 77.5733 24.8273 77.48C24.846 77.3867 24.8647 77.298 24.8833 77.214C24.902 77.1207 24.93 77.004 24.9673 76.864C25.014 76.724 25.0747 76.5327 25.1493 76.29L27.0113 70.2H28.6353L25.5133 80H24.4633L21.8733 73.868L21.9993 73.924L19.5073 80H18.4853Z"
                    fill="#223552"/>
            <g clip-path="url(#clip0_8_71)" class="arrow">
                <path d="M74.5636 85.2085L61.158 90.8801C60.7161 91.0765 60.2925 91.1195 59.8874 91.009C59.4823 90.8985 59.1447 90.7082 58.8746 90.4382C58.6046 90.1681 58.4204 89.8244 58.3222 89.407C58.224 88.9896 58.2731 88.5599 58.4695 88.118L72.6853 57.1084C72.8572 56.691 73.115 56.3841 73.4587 56.1877C73.8024 55.9913 74.1707 55.8931 74.5636 55.8931C74.9564 55.8931 75.3247 55.9913 75.6684 56.1877C76.0122 56.3841 76.27 56.691 76.4418 57.1084L90.6576 88.118C90.854 88.5599 90.9031 88.9896 90.8049 89.407C90.7067 89.8244 90.5226 90.1681 90.2525 90.4382C89.9824 90.7082 89.6448 90.8985 89.2397 91.009C88.8346 91.1195 88.4111 91.0765 87.9691 90.8801L74.5636 85.2085ZM84.6546 84.9876L74.5636 62.9641L64.4726 84.9876L74.5636 80.6418L84.6546 84.9876Z"
                      fill="#223552"/>
            </g>
            <defs>
                <clipPath id="clip0_8_71">
                    <rect width="50" height="50" fill="white" transform="translate(50 55)"/>
                </clipPath>
            </defs>
        </svg>`;
    }

    document.querySelector(".wind__direction .arrow").style.transform = `rotate(${data.current.wind_direction_10m}deg)`;
}

let sunProgress;

function displaySunriseAndSunset(data) {
    let sunrise = new Date(data.daily.sunrise[0]);
    let sunset = new Date(data.daily.sunset[0]);

    document.querySelector("#sunrise-value").textContent = sunrise.toLocaleTimeString("en-US", {
        hour: "2-digit",
        minute: "2-digit"
    });
    document.querySelector("#sunset-value").textContent = sunset.toLocaleTimeString("en-US", {
        hour: "2-digit",
        minute: "2-digit"
    });

    sunProgress = (new Date() - sunrise) / (sunset - sunrise);
    updateSunPosition();
}

function updateSunPosition() {
    let dot = document.getElementById('dot');
    let curve = document.getElementById('curve');
    let totalLength = curve.getTotalLength();
    if (sunProgress > 1) {
        sunProgress = 1;
        document.querySelector(".spot3").style.display = "none";
    }
    let u = sunProgress ?? 0;
    let p = curve.getPointAtLength(u * totalLength);

    dot.setAttribute("transform", `translate(${p.x}, ${p.y})`);
}

function displayMoonData(isAfterSunset) {
    const date = new Date(); // Current date and time

    const observer = new Astronomy.Observer(settings.activeLocation.lat, settings.activeLocation.lon, 0);

    const illuminationInfo = Astronomy.Illumination('Moon', date, observer);
    const moonrise = Astronomy.SearchRiseSet('Moon', observer, +1, date, 300);
    const moonset = Astronomy.SearchRiseSet('Moon', observer, -1, date, 300);

    isAfterSunset = true;

    if (isAfterSunset) {
        changeAstronomyType(astronomyTypes.MOON);
        const segmentedButton = document.querySelector("#segmented-button--astronomy");
        segmentedButton.querySelectorAll(".segmented-button__item")[1].classList.add("segmented-button__item--selected");

        refreshSegmentedButton(segmentedButton);
        // setActiveButton(segmentedButton, buttonToActivate, 1);
    }

    // console.log(moonrise);
    // console.log(moonset);

    // console.log(`Visual Magnitude: ${illuminationInfo.mag}`);
    // console.log(`Phase Angle: ${illuminationInfo.phase_angle}`);
    // console.log(`Phase Name: ${getMoonPhaseName(illuminationInfo.phase_angle)}`);
    // console.log(`Illuminated Fraction: ${illuminationInfo.phase_fraction}`);
    // let moonrise = Astronomy.SearchRiseSet('Moon', observer, date);
    // console.log(moonrise)
    document.querySelector(".moon__phase-graphic").src = `graphics/weathers-icons/moon-phases/${getMoonPhaseName(illuminationInfo.phase_angle).toLowerCase().replace(" ", "_")}.svg`;

    const phase = Astronomy.MoonPhase(date);

    document.querySelector(".moon__phase").textContent = getMoonPhaseName(phase);
    document.querySelector(".moon__illumination").textContent = `${Math.round(illuminationInfo.phase_fraction * 100)}%`;
    document.querySelector(".moon__moonrise").textContent = moonrise.date.toLocaleTimeString("en-US", {
        hour: "2-digit",
        minute: "2-digit"
    });
    document.querySelector(".moon__moonset").textContent = moonset.date.toLocaleTimeString("en-US", {
        hour: "2-digit",
        minute: "2-digit"
    });

    // console.log(illuminationInfo.phase_angle);
    // console.log(phase);
}

function displayUVIndex(data, hour) {
    let uvIndex = data.hourly.uv_index[hour];
    console.log(uvIndex);
    document.querySelector(".uv-index__value").textContent = Math.round(uvIndex);
    document.querySelector(".uv-index__description").textContent = getUVIndexDescription(uvIndex);
    document.querySelector(".uv-index__advice").textContent = getUVIndexAdvice(uvIndex);

    document.querySelector(".uv-index-indicator__thumb").style.left = `${(uvIndex / 12) * 100}%`;
}

function displayPrecipitation(data, hour) {
    let precipitation = 0;
    for (let i = hour; i < 24 + hour; i++) {
        precipitation += data.hourly.precipitation[i];
    }
    document.querySelector(".forecast-precipitation__value").textContent = `${Math.round(precipitation)} mm`;
}

function displayWeatherData(data) {
    fetchedData = data;

    let currentTime = new Date();

    let isAfterSunset = new Date(data.daily.sunset[0]) < currentTime;

    // Display current weather data
    displayCurrentData(data);

    // Display hourly weather data
    displayHourlyForecast(currentTime, data);

    // Display daily weather data
    displayDailyWeather(data);

    // Display air quality data
    fetch(`https://air-quality-api.open-meteo.com/v1/air-quality?latitude=${settings.activeLocation.lat}&longitude=${settings.activeLocation.lon}&current=european_aqi&hourly=pm10,pm2_5,carbon_monoxide,nitrogen_dioxide,sulphur_dioxide,ozone,european_aqi`)
        .then(response => response.json())
        .then(data => {
            console.log(data);
            displayAirQuality(data);
        })
        .catch(error => console.error("Error:", error));

    // Display wind data 
    displayWindData(data);

    // Display sunrise and sunset data
    displaySunriseAndSunset(data);

    // Display moon data
    displayMoonData(isAfterSunset);

    // Display UV index
    displayUVIndex(data, currentTime.getHours());

    // Display precipitation
    displayPrecipitation(data, currentTime.getHours());

    weatherPage.classList.add("weather-page--active");
}

function switchHourlyForecastLength(length) {
    displayHourlyForecast(new Date(), fetchedData, length);
}

function getWeatherConditionDescription(code) {
    const condition = weatherConditions.find(condition => condition[0] === code);
    return condition ? condition[1] : "Unknown";
}

function getWeatherConditionIcon(code) {
    const condition = weatherConditions.find(condition => condition[0] === code);
    return condition ? condition[2] : "Unknown";
}

function getAQIDescription(aqi) {
    if (aqi <= 50) return "Good";
    if (aqi <= 100) return "Moderate";
    if (aqi <= 150) return "Unhealthy for Sensitive Groups";
    if (aqi <= 200) return "Unhealthy";
    if (aqi <= 300) return "Very Unhealthy";
    return "Hazardous";
}

function getWindDirection(degrees) {
    if (degrees <= 22.5) return "N";
    if (degrees <= 67.5) return "NE";
    if (degrees <= 112.5) return "E";
    if (degrees <= 157.5) return "SE";
    if (degrees <= 202.5) return "S";
    if (degrees <= 247.5) return "SW";
    if (degrees <= 292.5) return "W";
    if (degrees <= 337.5) return "NW";
    return "N";
}

function getWindDescription(windSpeed) {
    if (windSpeed <= 1) return "Calm";
    if (windSpeed <= 5) return "Light Air";
    if (windSpeed <= 11) return "Light Breeze";
    if (windSpeed <= 19) return "Gentle Breeze";
    if (windSpeed <= 28) return "Moderate Breeze";
    if (windSpeed <= 38) return "Fresh Breeze";
    if (windSpeed <= 49) return "Strong Breeze";
    if (windSpeed <= 61) return "Moderate Gale";
    if (windSpeed <= 74) return "Gale";
    if (windSpeed <= 88) return "Strong Gale";
    if (windSpeed <= 102) return "Storm";
    if (windSpeed <= 117) return "Violent Storm";
    return "Hurricane";
}

function getUVIndexDescription(uvIndex) {
    if (uvIndex <= 2) return "Low";
    if (uvIndex <= 5) return "Moderate";
    if (uvIndex <= 7) return "High";
    if (uvIndex <= 10) return "Very High";
    return "Extreme";
}

function getUVIndexAdvice(uvIndex) {
    if (uvIndex <= 2) return "Low risk. No protection needed.";
    if (uvIndex <= 5) return "Moderate risk. Wear sunglasses and sunscreen.";
    if (uvIndex <= 7) return "High risk. Cover up, use sunscreen, and stay in shade.";
    if (uvIndex <= 10) return "Very high risk. Take extra precautions, avoid the sun.";
    return "Extreme risk. Avoid being outside during midday hours.";
}

function saveOrder(container) {
    const order = Array.from(container.children).map(item => item.dataset.id);
    localStorage.setItem(container.className, JSON.stringify(order));
}

function loadOrder(container) {
    const order = JSON.parse(localStorage.getItem(container.className));
    if (order) {
        order.forEach(id => {
            const item = container.querySelector(`[data-id="${id}"]`);
            if (item) {
                container.appendChild(item);
            }
        });
    }
}

function setActiveButton(segmentedButton, index) {
    console.log("Setting active button");
    setTimeout(() => {
        const buttons = segmentedButton.querySelectorAll(".segmented-button__item");
        buttons.forEach(btn => btn.classList.remove("segmented-button__item--selected"));

        buttons[index].classList.add("segmented-button__item--selected");
        let selectedButton = segmentedButton.querySelector(".segmented-button__item--selected");

        const buttonRect = selectedButton.getBoundingClientRect();
        const containerRect = segmentedButton.getBoundingClientRect();
        const offsetLeft = buttonRect.left - containerRect.left;

        segmentedButton.style.setProperty("--selected-index", index);
        segmentedButton.style.setProperty("--selected-width", `${buttonRect.width}px`);
        segmentedButton.style.setProperty("--selected-left", `${offsetLeft - 5}px`);
    }, 500);
}

function refreshSegmentedButton(segmentedButton) {
    const selectedButton = segmentedButton.querySelector(".segmented-button__item--selected");

    segmentedButton.style.setProperty("--selected-width", `${selectedButton.offsetWidth}px`);
    segmentedButton.style.setProperty("--selected-left", `${selectedButton.offsetLeft - 5}px`);
}

document.addEventListener("DOMContentLoaded", () => {
    fetchWeather();

    document.querySelectorAll(".segmented-button").forEach(segmentedButton => {
        const buttons = segmentedButton.querySelectorAll(".segmented-button__item");

        const selectedButton = segmentedButton.querySelector(".segmented-button__item--selected");

        if (selectedButton) {
            segmentedButton.style.setProperty("--selected-width", `${selectedButton.offsetWidth}px`);
            segmentedButton.style.setProperty("--selected-left", `${selectedButton.offsetLeft - 5}px`);
        }

        buttons.forEach((button, index) => {
            button.addEventListener("click", () => {
                buttons.forEach(btn => btn.classList.remove("segmented-button__item--selected"));

                button.classList.add("segmented-button__item--selected");

                const buttonRect = button.getBoundingClientRect();
                const containerRect = segmentedButton.getBoundingClientRect();
                const offsetLeft = buttonRect.left - containerRect.left;

                segmentedButton.style.setProperty("--selected-index", index);
                segmentedButton.style.setProperty("--selected-width", `${buttonRect.width}px`);
                segmentedButton.style.setProperty("--selected-left", `${offsetLeft - 5}px`);
            });
        });
    });

    const weatherPageContainer = document.querySelector('.weather-page__container');
    new Sortable(weatherPageContainer, {
        animation: 150,
        ghostClass: 'sortable-ghost',
        handle: '.weather-component',
        onEnd: () => saveOrder(weatherPageContainer)
    });

    const weatherPageSection = document.querySelector('.weather-page__section');
    new Sortable(weatherPageSection, {
        animation: 150,
        ghostClass: 'sortable-ghost',
        handle: '.weather-component',
        onEnd: () => saveOrder(weatherPageSection)
    });

    loadOrder(weatherPageContainer);
    loadOrder(weatherPageSection);

    window.addEventListener("resize", updatePath);
    updatePath();
});

const sunriseLine = document.querySelector(".sunrise__line");
const path = document.getElementById("curve");

function updatePath() {
    const width = sunriseLine.offsetWidth;
    const height = sunriseLine.offsetHeight;
    sunriseLine.setAttribute("viewBox", `0 0 ${width} ${height}`);
    const d = `M10 46 Q ${width / 2} -28 ${width - 10} 46`;
    path.setAttribute("d", d);

    updateSunPosition();
}

function getMoonPhaseName(angle) {
    angle = angle % 360;
    if (angle < 0) angle += 360;

    const phases = [
        {name: "New Moon", min: 0, max: 22.5},
        {name: "Waxing Crescent", min: 22.5, max: 67.5},
        {name: "First Quarter", min: 67.5, max: 112.5},
        {name: "Waxing Gibbous", min: 112.5, max: 157.5},
        {name: "Full Moon", min: 157.5, max: 202.5},
        {name: "Waning Gibbous", min: 202.5, max: 247.5},
        {name: "Last Quarter", min: 247.5, max: 292.5},
        {name: "Waning Crescent", min: 292.5, max: 337.5},
        {name: "New Moon", min: 337.5, max: 360}
    ];

    for (let phase of phases) {
        if (angle >= phase.min && angle < phase.max) {
            return phase.name;
        }
    }

    return "Unknown";
}

const astronomyTypes = Object.freeze({
    SUN: 0,
    MOON: 1
});

function changeAstronomyType(astronomyType) {
    const sun = document.querySelector(".sun");
    const moon = document.querySelector(".moon");

    if (astronomyType === astronomyTypes.SUN) {
        sun.style.display = "block";
        moon.style.display = "none";
        updatePath();
    } else if (astronomyType === astronomyTypes.MOON) {
        sun.style.display = "none";
        moon.style.display = "block";
    }
}